@page "/"

@using appointment_context_menu.Models
@using appointment_context_menu.Services

@inject AppointmentService ApptService
Because of the IsImportant flags set in the appointment models, you cannot delete the "Conference" and "Vet Visit" appointments.
This is reflected in the context menu options for them to showcase sample logic for altering its items.

<TelerikScheduler Data="@Appointments"
                  @bind-Date="@StartDate" Height="600px" @bind-View="@CurrView">
    <SchedulerViews>
        <SchedulerDayView StartTime="@DayStart" />
        <SchedulerWeekView StartTime="@DayStart" />
        <SchedulerMultiDayView StartTime="@DayStart" NumberOfDays="10" />
    </SchedulerViews>
    <ItemTemplate>
        @{
            SchedulerAppointment Appointment = context as SchedulerAppointment;
            <div style="height:100%" 
                 @oncontextmenu:preventDefault="true"
                 @oncontextmenu="@( (MouseEventArgs e) => ShowContextMenu(e, Appointment) )">
                <div style="height:100%" class="k-event-template">@Appointment.Title</div>
            </div>
        }
    </ItemTemplate>
    <AllDayItemTemplate>
        @{
            SchedulerAppointment Appointment = context as SchedulerAppointment;
            <div style="height:100%" 
                 @oncontextmenu:preventDefault="true"
                 @oncontextmenu="@( (MouseEventArgs e) => ShowContextMenu(e, Appointment) )">
                <div style="height:100%" class="k-event-template">@Appointment.Title</div>
            </div>
        }
    </AllDayItemTemplate>
</TelerikScheduler>

<TelerikContextMenu Data="@MenuItems" @ref="@TheContextMenu"
                    TextField="Text" IconField="Icon" DisabledField="Disabled"
                    OnClick="@( async (ContextMenuItem itm) => await MenuClickHandler(itm) )">
</TelerikContextMenu>


@code {
    public DateTime StartDate { get; set; }
    public SchedulerView CurrView { get; set; } = SchedulerView.Week;
    public DateTime DayStart { get; set; }
    List<SchedulerAppointment> Appointments { get; set; }
    SchedulerAppointment LastClickedAppointment { get; set; }
    TelerikContextMenu<ContextMenuItem> TheContextMenu { get; set; }
    List<ContextMenuItem> MenuItems = new List<ContextMenuItem>()
    {
            new ContextMenuItem
            {
                Text = "Delete",
                CommandName = "delete",
                Icon = IconName.Delete
            },
            new ContextMenuItem
            {
                Text = "Toggle Important",
                CommandName = "toggleimportant",
                Icon = IconName.Warning
            }
        };

    async Task ShowContextMenu(MouseEventArgs e, SchedulerAppointment appt)
    {
        LastClickedAppointment = appt;
        PrepareMenuItems(LastClickedAppointment);
        await TheContextMenu.ShowAsync(e.ClientX, e.ClientY);
    }

    void PrepareMenuItems(SchedulerAppointment appt)
    {
        // disable one item, you can make bigger changes here too
        MenuItems[0].Disabled = appt.IsImportant;
    }

    async Task MenuClickHandler(ContextMenuItem clickedItem)
    {
        // handle the command from the context menu by using the stored metadata
        if (!string.IsNullOrEmpty(clickedItem.CommandName) && LastClickedAppointment != null)
        {
            switch (clickedItem.CommandName.ToLowerInvariant())
            {
                case "delete":
                    await DeleteAppt(LastClickedAppointment);
                    break;
                case "toggleimportant":
                    await ToggleAppointmentImportant(LastClickedAppointment);
                    break;
                default:
                    break;
            }
        }
        LastClickedAppointment = null;
    }

    protected override async Task OnInitializedAsync()
    {
        DateTime start = ApptService.GetStartTime();
        StartDate = start;
        DayStart = start;
        await GetAppointments();
    }

    async Task DeleteAppt(SchedulerAppointment appt)
    {
        if (appt.IsImportant)
        {
            return;
        }
        await ApptService.DeleteAsync(appt);
        await GetAppointments();
    }

    async Task ToggleAppointmentImportant(SchedulerAppointment appt)
    {
        appt.IsImportant = !appt.IsImportant;
        await ApptService.UpdateAsync(appt);
        await GetAppointments();
    }

    async Task GetAppointments()
    {
        Appointments = new List<SchedulerAppointment>(await ApptService.GetAppointmentsAsync());
    }
}