@page "/grid/inlineediting"

@using Kendo.Blazor
@using Kendo.Blazor.Components.Grid
@using TelerikBlazor.Shared
@inject HttpClient Http

<span>Edit is cancelled for Chai Product</span>
<KendoGrid Data=@GridData EditMode="inline"
           Pageable="true" PageSize=@PageSize>
    <KendoGridToolBar>
        <KendoGridCommandButton Command="Create" Icon="add">Add Product</KendoGridCommandButton>
    </KendoGridToolBar>
    <KendoGridColumns>
        <KendoGridColumn Field=@nameof(Product.ProductName) Title="Product Name" />
        <KendoGridColumn Field=@nameof(Product.UnitPrice) Title="Unit Price" />
        <KendoGridColumn Field=@nameof(Product.UnitsInStock) Title="Units In Stock" />
        <KendoGridCommandColumn>
            <KendoGridCommandButton Command="Edit" Icon="edit" OnClick="TriggerEdit">Edit</KendoGridCommandButton>
            <KendoGridCommandButton Command="Update" Icon="save" ShowInEdit="true" OnClick="UpdateItem">Update</KendoGridCommandButton>
            <KendoGridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true" OnClick="CancelItem">Cancel</KendoGridCommandButton>
        </KendoGridCommandColumn>
    </KendoGridColumns>
</KendoGrid>

@functions {
    public IEnumerable<Product> GridData { get; set; }
    int PageSize = 15;

    protected override async Task OnInitAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        GridData = await Http.GetJsonAsync<Product[]>("api/NorthwindData/Products");
    }

    private void TriggerEdit(GridCommandEventArgs args)
    {
        var ProductName = (args.Item as Product).ProductName;

        if (ProductName == "Chai")
        {
            args.IsCancelled = true;
        }
    }
    private void UpdateItem(GridCommandEventArgs args)
    {
    }
    private void CancelItem(GridCommandEventArgs args)
    {
    }
}
