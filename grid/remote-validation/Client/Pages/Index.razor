@page "/"

@using RemoteValidationWasm.Shared
@using RemoteValidationWasm.Client.Services

@inject WeatherForecastService ForecastService

<PageTitle>Index</PageTitle>

<p>To trigger remote validation:</p>

<ul>
    <li>Add a row with a Date that already exists.</li>
    <li>Update a row that does not contain <em>Q</em> in the Summary.</li>
    <li>Delete one of the first five rows.</li>
</ul>

<TelerikGrid Data="@GridData"
             EditMode="@GridEditMode.Popup"
             OnCreate="@CreateHandler"
             OnUpdate="@UpdateHandler"
             OnDelete="@DeleteHandler"
             Sortable="true"
             Pageable="true"
             Height="500px">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Item</GridCommandButton>
    </GridToolBarTemplate>
    <GridColumns>
        <GridColumn Field="@nameof(WeatherForecast.Id)" Width="100px" Editable="false" Groupable="false" />
        <GridColumn Field="@nameof(WeatherForecast.Date)" DisplayFormat="{0:dddd, dd MMM yyyy}" />
        <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" Title="Temp. C" DisplayFormat="{0:N1}" />
        <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Title="Temp. F" DisplayFormat="{0:N1}" />
        <GridColumn Field="@nameof(WeatherForecast.Summary)" />
        <GridCommandColumn Width="200px">
            <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
            <GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true">Save</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="@SvgIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

<TelerikNotification @ref="@NotificationRef"
                     HorizontalPosition="@NotificationHorizontalPosition.Center"
                     VerticalPosition="@NotificationVerticalPosition.Top"
                     Class="above-modal-overlay">
</TelerikNotification>

<style>
    .above-modal-overlay {
        z-index: 22222;
    }
</style>

@code {
    private List<WeatherForecast> GridData { get; set; } = new();

    #region UI for Validation Errors

    private TelerikNotification? NotificationRef { get; set; }

    private void ShowErrorNotification(string message)
    {
        NotificationRef?.Show(new NotificationModel
        {
            CloseAfter = 0,
            Text = message,
            ThemeColor = ThemeConstants.Notification.ThemeColor.Error
        });
    }

    #endregion UI for Validation Errors

    #region Grid Data Operations

    private async Task CreateHandler(GridCommandEventArgs args)
    {
        WeatherForecast currItem = (WeatherForecast)args.Item;

        try
        {
            WeatherForecast insertedForecast = await ForecastService.InsertForecastAsync(currItem);
            // Update the view data, otherwise reload the Grid data.
            GridData.Insert(0, insertedForecast);
        }
        catch (Exception ex)
        {
            // Keep the Grid in edit mode.
            args.IsCancelled = true;

            ShowErrorNotification(ex.Message);
        }
    }

    private async Task UpdateHandler(GridCommandEventArgs args)
    {
        WeatherForecast currItem = (WeatherForecast)args.Item;

        await Task.Delay(1);

        try
        {
            WeatherForecast updatedForecast = await ForecastService.UpdateForecastAsync(currItem);
            // Update the view data, otherwise reload the Grid data.
            var index = GridData.FindIndex(i => i.Id == updatedForecast.Id);
            if (index != -1)
            {
                GridData[index] = updatedForecast;
            }
        }
        catch (Exception ex)
        {
            // Keep the Grid in edit mode.
            args.IsCancelled = true;

            ShowErrorNotification(ex.Message);
        }
    }

    private async Task DeleteHandler(GridCommandEventArgs args)
    {
        WeatherForecast currItem = (WeatherForecast)args.Item;

        try
        {
            await ForecastService.DeleteForecastAsync(currItem);
            // Update the view data, otherwise reload the Grid data.
            GridData.Remove(currItem);
        }
        catch (Exception ex)
        {
            ShowErrorNotification(ex.Message);
        }
    }

    #endregion Grid Data Operations

    #region Grid Data Generation

    protected override async Task OnInitializedAsync()
    {
        await GetForecasts();
    }

    private async Task GetForecasts()
    {
        GridData = await ForecastService.GetForecastListAsync(DateTime.Now);
    }

    #endregion Grid Data Generation
}
