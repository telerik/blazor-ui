@page "/chart"

@using RemoteValidationWasm.Shared
@using RemoteValidationWasm.Services
@inject WeatherForecastService ForecastService

<div class="container-fluid">
    <div class='row my-4'>
        <div class='col-12 col-lg-9 border-right'>
            @if (forecasts?.Count > 0)
            {
                <TelerikChart>
                    <ChartCategoryAxes>
                        <ChartCategoryAxis BaseUnit="@ChartCategoryAxisBaseUnit.Weeks" Type="@ChartCategoryAxisType.Date">
                            <ChartCategoryAxisLabels Format="{0:dd MMM}" />
                        </ChartCategoryAxis>
                    </ChartCategoryAxes>

                    <ChartSeriesItems>
                        <ChartSeries Type="@ChartSeriesType.Line" Name="High" Color="red"
                                     Data="@forecasts"
                                     Field="@nameof(WeatherForecast.TemperatureF)"
                                     CategoryField="@nameof(WeatherForecast.Date)"
                                     Aggregate="@ChartSeriesAggregate.Max">
                            <ChartSeriesLabels Visible="true" Template="#=dataItem.Summary#" />
                        </ChartSeries>

                        <ChartSeries Type="@ChartSeriesType.Line" Name="Low" Color="blue"
                                     Data="@forecasts"
                                     Field="@nameof(WeatherForecast.TemperatureF)"
                                     CategoryField="@nameof(WeatherForecast.Date)"
                                     Aggregate="@ChartSeriesAggregate.Min">
                            <ChartSeriesLabels Visible="true" Template="#=dataItem.Summary#" />
                        </ChartSeries>
                    </ChartSeriesItems>

                    <ChartValueAxes>
                        <ChartValueAxis AxisCrossingValue="new object[] { -50 }">
                            <ChartValueAxisLabels Format="{0} F"></ChartValueAxisLabels>
                        </ChartValueAxis>
                    </ChartValueAxes>

                    <ChartTitle Text="Min and Max temperatures for the upcoming weeks"></ChartTitle>
                </TelerikChart>
            }
            else
            {
                <div class="alert alert-info">No data available.</div>
            }
        </div>
        <div class='col-12 col-lg-3 mt-3 mt-lg-0'>
            <h3>Telerik UI for Blazor Chart</h3>
            <p>The Telerik UI for Blazor Charts provide high quality graphical data visualization options.</p>

            <p>
                They include a variety of chart types and styles that have extensive configuration options. This
                flexibility allows you to quickly and easily create the exact chart you need to fit your specific
                requirements for functionality and appearance.
            </p>

            <p>
                This example uses the following features:
                <ul>
                    <li>
                        <a target="_blank"
                           href="https://docs.telerik.com/blazor-ui/components/chart/data-bind">Data binding</a>
                    </li>
                    <li>
                        <a target="_blank"
                           href="https://docs.telerik.com/blazor-ui/components/chart/date-axis">Date axis</a>
                    </li>
                    <li>
                        <a target="_blank"
                           href="https://docs.telerik.com/blazor-ui/components/chart/labels-template-and-format">Label templates</a>
                    </li>
                </ul>
            </p>
        </div>
    </div>
</div>

@code{
    List<WeatherForecast> forecasts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DateTime currDate = DateTime.Now.Date;
        var allForecasts = await ForecastService.GetForecastListAsync(currDate);
        // use only dates within the last month as a reasonable range of data considering the BaseUnit
        forecasts = allForecasts.Where(f => currDate.Subtract(f.Date.Date) < new TimeSpan(30, 0, 0, 0) ).ToList();
    }
}