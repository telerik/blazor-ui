@page "/form"

@using RemoteValidationWasm.Shared

<div class="container-fluid">
    <div class='row my-4'>
        <div class='col-12 col-lg-9 border-right'>
            <div class="row example-wrapper">
                <div class="col-xs-12 col-sm-6 offset-sm-3 example-col">
                    <div class="card">
                        <div class="card-block">
                            <EditForm Model="@person" OnValidSubmit="@HandleValidSubmit" class="k-form">
                                <DataAnnotationsValidator />
                                <fieldset>
                                    <legend>User Details</legend>

                                    <div class="form-group">
                                        <label for="FNameTb">
                                            <span>First Name <span class="k-required">*</span></span>
                                        </label>
                                        <TelerikTextBox @bind-Value="@person.FirstName" Width="100%" Id="FNameTb" />
                                    </div>
                                    <div class="form-group">
                                        <label for="LNameTb">
                                            <span>Last Name <span class="k-required">*</span></span>
                                        </label>
                                        <TelerikTextBox @bind-Value="@person.LastName" Width="100%" Id="LNameTb" />
                                    </div>
                                    <div class="form-group">
                                        <label for="GenderDDL">
                                            <span>Gender <span class="k-field-info">optional</span></span>
                                        </label>
                                        <TelerikDropDownList @bind-Value="person.Gender" DefaultText="Select gender"
                                                             Data="@genders" TextField="Text" ValueField="Id"
                                                             Width="100%" PopupWidth="200px" PopupHeight="auto" Id="GenderDDL">
                                        </TelerikDropDownList>
                                    </div>
                                    <div class="form-group">
                                        <label for="EmailTb">
                                            <span>Email <span class="k-required">*</span></span>
                                        </label>
                                        <TelerikTextBox @bind-Value="@person.Email" Width="100%" Id="EmailTb" />
                                    </div>
                                </fieldset>

                                <fieldset>
                                    <legend>Team Preferences</legend>
                                    <div class="form-group">
                                        <label for="StartDateDP">
                                            <span>Start date <span class="k-required">*</span></span>
                                        </label>
                                        <TelerikDatePicker @bind-Value="@person.StartDate" Width="100%" Id="StartDateDP" />
                                    </div>
                                    <div class="form-group">
                                        <label for="TeamDDL">
                                            <span>Languages <span class="k-required">*</span></span>
                                        </label>
                                        <TelerikDropDownList @bind-Value="@person.PreferredTeam"
                                                             DefaultText="Preferred team" Id="TeamDDL"
                                                             Data="@Teams" Width="100%" PopupWidth="200px" />
                                    </div>
                                </fieldset>

                                <ValidationSummary />

                                @if (ShowSuccessMessage)
                                {
                                    <div class="alert alert-info">
                                        Application form submitted Successfully, we will get back to you
                                    </div>
                                }

                                <div class="text-right">
                                    <TelerikButton ButtonType="@ButtonType.Button" OnClick="@CancelForm">Cancel</TelerikButton>
                                    <TelerikButton ButtonType="@ButtonType.Submit" Primary="true">Submit</TelerikButton>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class='col-12 col-lg-3 mt-3 mt-lg-0'>
            <h3>Telerik UI for Blazor Form</h3>
            <p>Telerik UI for Blazor provides comprehensive support for building forms.</p>

            <p>
                For more information on implementing validation and labels, refer to the article
                on <a href="https://docs.telerik.com/blazor-ui/common-features/input-validation" target="_blank">Input Validation support by Telerik UI for Blazor
                </a>.
            </p>
        </div>
    </div>
</div>

@code{
    Person person { get; set; }
    bool ShowSuccessMessage { get; set; }

    protected override Task OnInitializedAsync()
    {
        GetDefaultPerson();

        return base.OnInitializedAsync();
    }

    async void HandleValidSubmit()
    {
        // implement actual data storage here
        ShowSuccessMessage = true;
        await Task.Delay(2000);
        ShowSuccessMessage = false;
        GetDefaultPerson();
        StateHasChanged();
    }

    void CancelForm()
    {
        GetDefaultPerson();
    }

    void GetDefaultPerson()
    {
        // in reality you may be pulling data from a service or authentication logic
        // not only for the form model, but also for the data sources below
        person = new Person()
        {
            StartDate = DateTime.Now.AddDays(7)
        };
    }

    IEnumerable<DropDownModel> genders = new List<DropDownModel>
    {
        new DropDownModel {Text = "female", Id = 1},
        new DropDownModel {Text = "male", Id = 2},
        new DropDownModel {Text = "other", Id = 3},
        new DropDownModel {Text = "I'd rather not say", Id = 4}
    };

    List<string> Teams = new List<string>
    {
        "Blazor", "Python", "Ruby", "Java", "JavaScript", "Assembler"
    };
} 