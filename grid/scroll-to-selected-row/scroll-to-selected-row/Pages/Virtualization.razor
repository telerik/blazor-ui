@page "/virtualization"

@using scroll_to_selected_row.Models
@using scroll_to_selected_row.Services
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject GridDataService DataService
@inject IJSRuntime JsInterop

<TelerikButton OnClick="@SelectItem">Select item 48</TelerikButton>

<TelerikGrid Data=@GridData
             SelectionMode="GridSelectionMode.Single"
             @bind-SelectedItems="@SelectedItems"
             ScrollMode="@GridScrollMode.Virtual"
             RowHeight="40"
             PageSize="@PageSize"
             @ref="@GridRef"
             TotalCount=@Total OnRead="@ReadItems"
             Height="300px"
             Sortable="true">
    <GridColumns>
        <GridColumn Field=@nameof(Employee.Name) />
        <GridColumn Field=@nameof(Employee.Team) Title="Team" />
    </GridColumns>
</TelerikGrid>

@code {
    string theGridClass { get; set; } = "theSpecialGrid";
    TelerikGrid<Employee> GridRef { get; set; }
    int Total { get; set; }
    List<Employee> GridData { get; set; }
    int PageSize { get; set; } = 20;
    DataSourceRequest lastRequest { get; set; }

    async Task SelectItem()
    {
        // select item 48 which would be hidden initially
        // since we will set the grid state, we set the selected items there too
        // otherwise the change may be lost
        // see also the Employee model for the Equals() override that allows selection comparisons
        var itemsToSelect = AllData.Where(item => item.EmployeeId == 48).ToList();

        // We can't be sure whether the selected item will be in the collection of loaded items
        // so we will use the grid's state to scroll to that item by setting the Skip parameter
        // to the index of the item in the current data collection
        // NOTE: you must optimize this task according to your project
        // in this example we will sort and filter the entire data collection without paging
        // to get the index, but that may be slow/expensive/impossible in a real app
        // also, this example does not employ any defensive checks and error handling, which you should add

        // first, we will store the original values to ensure we don't break anything if this is used elsewhere
        // then move the "marker" to no paging and start from the very beginning so we get all the data sorted and filtered
        lastRequest.PageSize = 0;
        int currSkip = lastRequest.Skip;
        lastRequest.Skip = 0;
        int TargetItemIndex = AllData.ToDataSourceResult(lastRequest).Data.IndexOf(itemsToSelect.First());
        lastRequest.PageSize = PageSize;
        lastRequest.Skip = currSkip;

        // set the calculated scroll offset to show the desired item, and set the selected items in one rendering
        await SetSkip(TargetItemIndex, itemsToSelect);
    }

    protected async Task ReadItems(GridReadEventArgs args)
    {
        //we store the request the grid makes because we use it in the index calculatoin above
        lastRequest = args.Request;

        //this should actually be happening on the server, but for brevity we do it here
        //see more at https://github.com/telerik/blazor-ui/tree/master/grid/datasourcerequest-on-server
        var datasourceResult = AllData.ToDataSourceResult(args.Request);
        GridData = (datasourceResult.Data as IEnumerable<Employee>).ToList();
        Total = datasourceResult.Total;


        // see more about why this is done here https://docs.telerik.com/blazor-ui/knowledge-base/grid-large-skip-breaks-virtualization
        int allowedSkip = ValidateSkip(args.Request.Skip);
        if (allowedSkip != args.Request.Skip)
        {
            await SetSkip(allowedSkip);
        }


        await InvokeAsync(StateHasChanged);
    }

    async Task SetSkip(int skip)
    {
        await SetSkip(skip, null);
    }

    async Task SetSkip(int skip, IEnumerable<Employee> itemsToSelect)
    {
        if (GridRef != null)
        {
            var state = GridRef.GetState();
            if (itemsToSelect != null)
            {
                state.SelectedItems = (ICollection<Employee>)itemsToSelect;
            }
            state.Skip = ValidateSkip(skip);
            await GridRef.SetState(state);
        }
    }

    int ValidateSkip(int desiredSkip)
    {
        if (desiredSkip < 0) return 0;
        int itemsThatFitPerPage = 7; // see how the grid renders and determine this from there
        bool isInvalidSkip = GridData.Count < itemsThatFitPerPage;
        return isInvalidSkip ? Total - itemsThatFitPerPage : desiredSkip;
    }

    // data generation follows
    public List<Employee> AllData { get; set; }
    public IEnumerable<Employee> SelectedItems { get; set; } = Enumerable.Empty<Employee>();

    protected override async Task OnInitializedAsync()
    {
        AllData = await DataService.GenerateData();
    }
}