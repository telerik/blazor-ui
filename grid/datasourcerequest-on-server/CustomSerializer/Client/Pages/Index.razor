@page "/"

@using CustomSerializer.Shared 
@using CustomSerializer.Client.Services
@using Telerik.DataSource 
@inject WeatherForecastService ForecastService

<TelerikGrid Height="550px" FilterMode="@GridFilterMode.FilterMenu"
             Sortable="true" Pageable="true" PageSize="20" Groupable="true"
             TItem="@WeatherForecast" OnRead="@ReadItems">
    <GridColumns>
        <GridColumn Field="Id" FieldType="@(typeof(int))" Title="Id" Width="100px" Groupable="false" />
        <GridColumn Field="Date" FieldType="@(typeof(DateTime))">
            <Template>
                @((context as WeatherForecast).Date.ToString("dddd, dd MMM yyyy"))
            </Template>
        </GridColumn>
        <GridColumn Field="TemperatureC" FieldType="@(typeof(int))" Title="Temp. C" />
        <GridColumn Field="TemperatureF" FieldType="@(typeof(int))" Title="Temp. F" />
        <GridColumn Field="Summary" FieldType="@(typeof(string))" />
    </GridColumns>
</TelerikGrid>

@code {
    async Task ReadItems(GridReadEventArgs args)
    {
        // we pass the request to the service, and there Telerik DataSource Extension methods will shape the data
        // then the service returns our project-specific envelope so that the data can be serialized by the framework
        DataEnvelope<WeatherForecast> result = await ForecastService.GetForecastListAsync(args.Request);


        if (args.Request.Groups.Count > 0)
        {
            var data = GroupDataHelpers.DeserializeGroups<WeatherForecast>(result.GroupedData);
            args.Data = data.Cast<object>().ToList();
        }
        else
        {
            args.Data = result.CurrentPageData.Cast<object>().ToList();
        }

        args.Total = result.TotalItemCount;
    }

    // for brevity, CUD operations are not implemented, only Read
}