@page "/investments"

@inherits ResponsiveComponent

@inject InvestmentService InvestmentService
@inject StockPointService StockPointService

<PageTitle>Investments</PageTitle>

<h1>Investments</h1>

<UICard Title="Total Investments" ColSpanOnLargeScreen="5" ColSpanOnMediumScreen="12">
    <TelerikChart @ref="@PieChartRef" Height="240px">
        <ChartSeriesItems>
            <ChartSeries Type="@ChartSeriesType.Pie"
                         Data="@PieChartData"
                         CategoryField="@nameof(TotalInvestment.Category)"
                         Field="@nameof(TotalInvestment.Value)">
                <ChartSeriesLabels Format="{0:C0}" Visible="true" Position="@ChartSeriesLabelsPosition.InsideEnd" />
            </ChartSeries>
        </ChartSeriesItems>
        <ChartLegend Position="@ChartLegendPosition.Right" />
    </TelerikChart>
</UICard>

<UICard Title="Today's Top 5 Movers" ColSpanOnLargeScreen="7" ColSpanOnMediumScreen="12">
    <TelerikListView Data="@ListViewData">
        <Template>
            @{ decimal dailyChangeAmount = (Convert.ToDecimal(context.DailyChange) * context.CurrentValue); }
            <div class="k-d-grid k-grid-cols-4 k-gap-4 k-align-items-center k-pt-2 k-pb-2">
                <div class="k-d-flex k-gap-2 k-align-items-center">
                    <TelerikAvatar Type="@AvatarType.Image">
                        <img src="@( $"images/asset-{context.Symbol.ToLowerInvariant()}.png" )" alt="@context.AssetName" />
                    </TelerikAvatar>
                    <span class="k-d-flex k-flex-col asset">
                        <strong>@context.Symbol</strong>
                        <span class="k-font-size-sm">@context.AssetName</span>
                    </span>
                </div>
                <span class="k-pl-4 k-font-medium">@( dailyChangeAmount.ToString("C2") )</span>
                <span class="k-pl-4 k-d-flex k-align-items-center @GetChangeColor(context.DailyChange)">
                    <TelerikSvgIcon Icon="@GetChangeIcon(context.DailyChange)" Size="@ThemeConstants.SvgIcon.Size.Small" />
                    @context.DailyChange.ToString("P1")
                </span>
                <span class="k-text-right k-pr-2 k-font-medium">@context.CurrentValue.ToString("C2")</span>
            </div>
        </Template>
    </TelerikListView>
</UICard>

<UICard Title="Stock Chart">
<TelerikTabStrip @bind-ActiveTabIndex="@TabStripActiveTabIndex" Class="no-content-padding">

    @foreach (var stockChartItem in StockChartData)
    {
        <TabStripTab Title="@stockChartItem.Value.Name" @key="@stockChartItem">
            <TelerikStockChart @ref="stockChartItem.Value.StockChartRef"
                               DateField="@nameof(StockPoint.Date)"
                               Width="96%"
                               Height="480px">

                <StockChartNavigator>
                    <StockChartNavigatorSeriesItems>
                        <StockChartNavigatorSeries Type="StockChartSeriesType.Line"
                                                   Name="@stockChartItem.Value.Name"
                                                   Data="@stockChartItem.Value.StockChartData"
                                                   Field="@nameof(StockPoint.High)"
                                                   CategoryField="@nameof(StockPoint.Date)"
                                                   Color="var(--kendo-color-series-c)">
                        </StockChartNavigatorSeries>
                    </StockChartNavigatorSeriesItems>
                </StockChartNavigator>

                <StockChartCategoryAxes>
                    <StockChartCategoryAxis BaseUnit="@ChartCategoryAxisBaseUnit.Fit"
                                            AxisCrossingValue="@(new object[] { 0, int.MaxValue })" />
                </StockChartCategoryAxes>

                <StockChartValueAxes>
                    <StockChartValueAxis Name="candle-axis" Min="0" Max="60" />
                    <StockChartValueAxis Name="volumne-axis" Min="0" Max="400_000" />
                </StockChartValueAxes>

                <StockChartSeriesItems>
                    <StockChartSeries Type="StockChartSeriesType.Candlestick"
                                      Name="@stockChartItem.Value.Name"
                                      Data="@stockChartItem.Value.StockChartData"
                                      OpenField="@nameof(StockPoint.Open)"
                                      CloseField="@nameof(StockPoint.Close)"
                                      HighField="@nameof(StockPoint.High)"
                                      LowField="@nameof(StockPoint.Low)"
                                      Aggregate="@ChartSeriesAggregate.Avg"
                                      Color="var(--kendo-color-series-c)"
                                      Axis="candle-axis">
                    </StockChartSeries>
                    <StockChartSeries Type="StockChartSeriesType.Column"
                                      Name="@stockChartItem.Value.Name"
                                      Data="@stockChartItem.Value.StockChartData"
                                      Field="@nameof(StockPoint.Volume)"
                                      Aggregate="@ChartSeriesAggregate.Sum"
                                      Color="var(--kendo-color-series-c)"
                                      Axis="volumne-axis">
                        <StockChartSeriesTooltip>
                            <Template>
                                @{ var dataItem = (StockPoint)context.DataItem; }
                                @dataItem.Volume.ToString("C2")
                            </Template>
                        </StockChartSeriesTooltip>
                    </StockChartSeries>
                </StockChartSeriesItems>

            </TelerikStockChart>
        </TabStripTab>
    }
</TelerikTabStrip>

</UICard>

@code {
    private List<TotalInvestment> PieChartData { get; set; } = new();
    private List<AssetInfo> ListViewData { get; set; } = new();

    private TelerikChart? PieChartRef { get; set; }

    private int TabStripActiveTabIndex { get; set; }

    private Dictionary<int, InvestmentStockChart> StockChartData { get; set; } = new()
    {
        { 0, new InvestmentStockChart() { Name = "Solar Flux"} },
        { 1, new InvestmentStockChart() { Name = "Quantum" } },
        { 2, new InvestmentStockChart() { Name = "Neopharm" } },
        { 3, new InvestmentStockChart() { Name = "Solaris" } },
        { 4, new InvestmentStockChart() { Name = "Globefin Bank" } }
    };

    private string GetChangeColor(double amount)
    {
        return amount >= 0 ? "k-text-success" : "k-text-error";
    }

    private SvgIconsNS.ISvgIcon GetChangeIcon(double amount)
    {
        return amount >= 0 ? new SvgIconsNS.CaretAltUp() : new SvgIconsNS.CaretAltDown();
    }

    [JSInvokable("OnViewPortResize")]
    public override Task OnViewPortResize()
    {
        PieChartRef?.Refresh();
        StockChartData[TabStripActiveTabIndex].StockChartRef?.Refresh();

        return base.OnViewPortResize();
    }

    protected override async Task OnInitializedAsync()
    {
        PieChartData = await InvestmentService.ReadTotalInvestments();
        ListViewData = await InvestmentService.ReadTopMovers();

        foreach (var item in StockChartData)
        {
            item.Value.StockChartData = await StockPointService.Read();
        }

        await base.OnInitializedAsync();
    }
}
