@inherits LayoutComponentBase
@layout TelerikLayout

@inject NavigationManager NavManager
@inject SearchService SearchService
@inject UserService UserService

<TelerikMediaQuery Media="(min-width: 1201px)" OnChange="@( (bool matches) => IsOverMaxWidth = matches )" />
<TelerikMediaQuery Media="(min-width: 992px)" OnChange="@( (bool matches) => IsLargeScreen = matches )" />
<TelerikMediaQuery Media="(min-width: 768px)" OnChange="@( (bool matches) => IsMediumOrLargeScreen = matches )" />

<TelerikDrawer Data="@DrawerData"
               TItem="@NavItem"
               @bind-Expanded="@DrawerExpanded"
               SelectedItem="@DrawerSelectedItem"
               SelectedItemChanged="@DrawerSelectedItemChanged"
               Mode="@DrawerMode.Overlay"
               MiniMode="true"
               Class="mainlayout-drawer">
    <DrawerContent>
        <div id="drawer-content-wrapper" class="k-ml-auto k-mr-auto">

            <TelerikAppBar ThemeColor="@ThemeConstants.AppBar.ThemeColor.Base"
                           Class="appbar-top">
                <AppBarSection>
                    <div class="greeting">
                        <TelerikAvatar Width="42px" Height="42px">
                            <img src="images/maria-avatar.jpeg" alt="Maria profile photo" />
                        </TelerikAvatar>
                        <span>
                            <strong>Hi, @AppUser.FirstName!</strong>
                            <span>Welcome back!</span>
                        </span>
                    </div>
                </AppBarSection>
                <AppBarSpacer />
                <AppBarSection>
                    <TelerikAutoComplete OnRead="@OnAutoCompleteRead"
                                         TItem="@SearchablePage"
                                         @bind-Value="@AutoCompleteValue"
                                         ValueField="@nameof(SearchablePage.Title)"
                                         Filterable="true"
                                         FilterOperator="@StringFilterOperator.Contains"
                                         OnChange="@OnAutoCompleteValueChange"
                                         Placeholder="Search app content or components"
                                         Rounded="@ThemeConstants.AutoComplete.Rounded.Large"
                                         Class="search-textbox">
                        <AutoCompletePrefixTemplate>
                            <TelerikSvgIcon Icon="@SvgIconsNS.SvgIcon.Search" />
                        </AutoCompletePrefixTemplate>
                        <AutoCompleteSettings>
                            <AutoCompletePopupSettings Height="auto" />
                        </AutoCompleteSettings>
                    </TelerikAutoComplete>
                </AppBarSection>
                <AppBarSpacer />
                <AppBarSection>
                    <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"
                                   Size="@ThemeConstants.Button.Size.Small"
                                   Rounded="@ThemeConstants.Button.Rounded.Large"
                                   OnClick="@GoToAIAssistantPage">AI Assistant</TelerikButton>
                </AppBarSection>
                <AppBarSection>
                    <CultureChooser />
                </AppBarSection>
            </TelerikAppBar>

            <main class="k-d-grid k-grid-cols-12 k-gap-4 k-pb-4">
                <CascadingValue Value="@IsLargeScreen" Name="IsLargeScreen">
                    <CascadingValue Value="@IsMediumOrLargeScreen" Name="IsMediumOrLargeScreen">
                        <CascadingValue Value="@this" IsFixed="true">
                            @Body
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </main>

            <TelerikAppBar ThemeColor="@ThemeConstants.AppBar.ThemeColor.Base"
                           Class="@( $"appbar-bottom {( IsOverMaxWidth ? "narrow" : string.Empty )}" )">
                <AppBarSection>
                    <div class="@( IsOverMaxWidth ? string.Empty : "k-pl-15" )">
                        <a class="k-d-flex k-align-items-center k-gap-2 k-p-2 k-text-inherit"
                            href="https://github.com/telerik/blazor-ui/tree/master/sample-applications/blazor-financial-dashboard"
                            target="_blank">
                            <img src="images/github-icon.svg" alt="GitHub logo" /> Get the Source Code
                        </a>

                        <div class="k-p-2">Copyright &copy; @DateTime.Today.Year Progress Software. All rights reserved.</div>
                    </div>
                </AppBarSection>
                <AppBarSpacer />
            </TelerikAppBar>

        </div>
    </DrawerContent>
</TelerikDrawer>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private readonly IEnumerable<NavItem> DrawerData = new List<NavItem>() {
        new NavItem("Menu", SvgIconsNS.SvgIcon.Menu, string.Empty),
        new NavItem(),
        new NavItem("Overview", SvgIconsNS.SvgIcon.Grid, "/blazor-financial-dashboard/"),
        new NavItem("Transactions", SvgIconsNS.SvgIcon.ArrowsSwap, "/blazor-financial-dashboard/transactions"),
        new NavItem("Investments", SvgIconsNS.SvgIcon.Dollar, "/blazor-financial-dashboard/investments"),
        new NavItem("Analytics", SvgIconsNS.SvgIcon.ChartColumnStacked, "/blazor-financial-dashboard/analytics"),
        new NavItem("AI Assistant", SvgIconsNS.SvgIcon.Sparkles, "/blazor-financial-dashboard/ai-assistant"),
        new NavItem(),
        new NavItem("Settings", SvgIconsNS.SvgIcon.Gear, "/blazor-financial-dashboard/settings")
    };

    private bool DrawerExpanded { get; set; }

    private NavItem? DrawerSelectedItem { get; set; }

    private string AutoCompleteValue { get; set; } = string.Empty;

    private bool IsOverMaxWidth { get; set; }
    private bool IsLargeScreen { get; set; }
    private bool IsMediumOrLargeScreen { get; set; }

    private User AppUser { get; set; } = null!;

    private void DrawerSelectedItemChanged(NavItem newSelectedItem)
    {
        if (newSelectedItem?.Icon is SvgIconsNS.Menu)
        {
            DrawerExpanded = !DrawerExpanded;
        }
        else
        {
            DrawerSelectedItem = newSelectedItem;
        }
    }
    private void GoToAIAssistantPage()
    {
        NavItem aiAssistantItem = DrawerData.First(i => i.Url == "/blazor-financial-dashboard/ai-assistant");
        DrawerSelectedItem = aiAssistantItem;
        NavManager.NavigateTo(aiAssistantItem.Url);
    }

    private void SelectDrawerItem()
    {
        var url = NavManager.Uri.Replace(NavManager.BaseUri, "/").ToLowerInvariant();

        DrawerSelectedItem = DrawerData.FirstOrDefault(x => x.Url.ToLowerInvariant() == url);
    }

    internal async Task GetAppUser(bool forceRefresh = false)
    {
        AppUser = await UserService.Read(1);

        if (forceRefresh)
        {
            StateHasChanged();
        }
    }

    private void OnAutoCompleteValueChange(object currentValue)
    {
        string currentStringValue = currentValue?.ToString()?.ToLowerInvariant() ?? "";

        if (string.IsNullOrEmpty(currentStringValue))
        {
            return;
        }

        SearchablePage? matchedPage = FilteredAutoCompleteData.FirstOrDefault(x => x.Title.ToLowerInvariant().Contains(currentStringValue));

        if (matchedPage is not null && matchedPage.Title != DrawerSelectedItem?.Text)
        {
            NavItem? matchedNavItem = DrawerData.FirstOrDefault(x => x.Text == matchedPage.Title);

            if (matchedNavItem is not null)
            {
                DrawerSelectedItem = matchedNavItem;
                NavManager.NavigateTo(matchedNavItem.Url);
                AutoCompleteValue = string.Empty;
                FilteredAutoCompleteData = new();
            }
        }
    }

    private List<SearchablePage> FilteredAutoCompleteData { get; set; } = new();

    private async Task OnAutoCompleteRead(AutoCompleteReadEventArgs args)
    {
        var result = await SearchService.Read(args.Request);

        args.Data = result.Data;
        args.Total = result.Total;

        FilteredAutoCompleteData = result.Data.Cast<SearchablePage>().ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAppUser();

        SelectDrawerItem();

        await base.OnInitializedAsync();
    }
}
