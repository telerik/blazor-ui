@namespace BlazingCoffee.Client.Shared
@using Telerik.SvgIcons;
@inject IJSRuntime js

<TelerikDropDownList Id="theme"
                     Data="Themes"
                     TextField="ThemeText"
                     ValueField="ThemeValue"
                     Value="@SelectedTheme"
                     Width="140px"
                     ValueChanged="@( (string v) => HandleThemeSelected(v) )">
    <ValueTemplate>
        <TelerikSvgIcon Icon="@SvgIcon.Palette"></TelerikSvgIcon>
        <div class="ddl-separator"></div>
        <span class="text-content">@((context as ThemeSetting).ThemeText)</span>
    </ValueTemplate>
    <DropDownListSettings>
        <DropDownListPopupSettings Height="" Width="150px"></DropDownListPopupSettings>
    </DropDownListSettings>
</TelerikDropDownList>

@code {
    string SelectedTheme = "default-ocean-blue";

    IEnumerable<ThemeSetting> Themes => new List<ThemeSetting>
    {
        new ThemeSetting { ThemeText = "Ocean Blue", ThemeValue = "default-ocean-blue", IsSwatch = true, MainTheme = "default" },
        new ThemeSetting { ThemeText = "Default", ThemeValue = "default", IsSwatch = false, MainTheme = "default" },
        new ThemeSetting { ThemeText = "Bootstrap", ThemeValue = "bootstrap", IsSwatch = false, MainTheme = "bootstrap" },
        new ThemeSetting { ThemeText = "Material", ThemeValue = "material", IsSwatch = false, MainTheme = "material" }
    };

    async Task HandleThemeSelected(string value)
    {
        await js.InvokeVoidAsync("themeChooser.setTheme", Themes.FirstOrDefault(t=> t.ThemeValue == value));
        SelectedTheme = value;
    }

    protected override async Task OnInitializedAsync()
    {
        var theme = await js.InvokeAsync<ThemeSetting>("themeChooser.getTheme");

        SelectedTheme = string.IsNullOrEmpty(theme.ThemeValue) ? "default-ocean-blue" : theme.ThemeValue;
    }
}