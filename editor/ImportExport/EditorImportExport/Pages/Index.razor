@page "/"

@using EditorImportExport.Data
@using Telerik.Blazor.Components.Editor

@inject FileConverter fileConverter

<TelerikEditor @bind-Value="@EditorValue" Tools="@EditorTools" EditMode="@EditorEditMode.Div" Height="700px">
    <EditorCustomTools>
        <EditorCustomTool Name="ExportTool">
            <TelerikButton OnClick="@ExportToPdf" Icon="@SvgIcon.Download"
                           ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"></TelerikButton>
            &nbsp;
            <TelerikDropDownList Data="@SupportedExportFormats" @bind-Value="@ExportFormat" Width="auto">
                <ItemTemplate>
                    @context.ToUpper()
                </ItemTemplate>
                <ValueTemplate>
                    @context.ToUpper()
                </ValueTemplate>
                <DropDownListSettings>
                    <DropDownListPopupSettings Height="auto" />
                </DropDownListSettings>
            </TelerikDropDownList>
        </EditorCustomTool>
    </EditorCustomTools>
</TelerikEditor>

<TelerikNotification @ref="@NotificationRef"
                     HorizontalPosition="@NotificationHorizontalPosition.Center"
                     VerticalPosition="@NotificationVerticalPosition.Top" />

@code{
    private string EditorValue { get; set; } = string.Empty;
    private List<IEditorTool> EditorTools { get; set; } = new();

    private string ExportFormat { get; set; } = "pdf";
    private List<string> SupportedExportFormats { get; set; } = new List<string> { "docx", "html", "pdf", "rtf", "txt" };

    private TelerikNotification NotificationRef { get; set; } = null!;

    private async Task ExportToPdf()
    {
        // Make table cell borders visible in the exported file.
        EditorValue = EditorValue.Replace("<td>", "<td style=\"border:1px solid #999;\">");

        bool exportSuccess = await fileConverter.ExportAndDownloadHtmlContent(EditorValue,
            $"EditorContent-{DateTime.Now.Millisecond}.{ExportFormat}");

        if (!exportSuccess)
        {
            ShowErrorNotification("Editor export");
        }
    }

    protected override void OnInitialized()
    {
        EditorTools = new List<IEditorTool>(EditorToolSets.All);
        EditorTools.Insert(0, new CustomTool("ExportTool"));

        // Load the document as HTML.
        EditorValue = fileConverter.GetHtmlString();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(EditorValue))
        {
            ShowErrorNotification("File import");
        }
    }

    private void ShowErrorNotification(string text = "Operation")
    {
        NotificationRef.Show(new NotificationModel()
        {
            Closable = true,
            CloseAfter = 10000,
            ThemeColor = ThemeConstants.Notification.ThemeColor.Error,
            Text = $"{text} failed. Something in the content may be preventing the format conversion."
        });
    }
}
